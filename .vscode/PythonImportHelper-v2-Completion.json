[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "RowMapping",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Row",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "RowMapping",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "QueuePool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "async_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "isExtraImport": true,
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "isExtraImport": true,
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "meta",
        "importPath": "webapp.models",
        "description": "webapp.models",
        "isExtraImport": true,
        "detail": "webapp.models",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "starlette",
        "description": "starlette",
        "isExtraImport": true,
        "detail": "starlette",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "importPath": "tests.const",
        "description": "tests.const",
        "isExtraImport": true,
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "get_user_by_id",
        "importPath": "webapp.crud.get_user",
        "description": "webapp.crud.get_user",
        "isExtraImport": true,
        "detail": "webapp.crud.get_user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "webapp.crud.get_user",
        "description": "webapp.crud.get_user",
        "isExtraImport": true,
        "detail": "webapp.crud.get_user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "webapp.crud.get_user",
        "description": "webapp.crud.get_user",
        "isExtraImport": true,
        "detail": "webapp.crud.get_user",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "ingredient_to_recipe",
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipe",
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipe",
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipe",
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipe",
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "TestRedisClient",
        "importPath": "tests.mocking.redis",
        "description": "tests.mocking.redis",
        "isExtraImport": true,
        "detail": "tests.mocking.redis",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "isExtraImport": true,
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "get_redis",
        "importPath": "webapp.db.redis",
        "description": "webapp.db.redis",
        "isExtraImport": true,
        "detail": "webapp.db.redis",
        "documentation": {}
    },
    {
        "label": "get_redis",
        "importPath": "webapp.db.redis",
        "description": "webapp.db.redis",
        "isExtraImport": true,
        "detail": "webapp.db.redis",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "webapp.main",
        "description": "webapp.main",
        "isExtraImport": true,
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "start_redis",
        "importPath": "webapp.on_startup.redis",
        "description": "webapp.on_startup.redis",
        "isExtraImport": true,
        "detail": "webapp.on_startup.redis",
        "documentation": {}
    },
    {
        "label": "start_redis",
        "importPath": "webapp.on_startup.redis",
        "description": "webapp.on_startup.redis",
        "isExtraImport": true,
        "detail": "webapp.on_startup.redis",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "conf.config",
        "description": "conf.config",
        "isExtraImport": true,
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ORJSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get_all",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get_all",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "create",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "isExtraImport": true,
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientResponse",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientResponse",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientsResponse",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientResponse",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "get_ingredient_recipe",
        "importPath": "webapp.crud.get_ingredient_recipe",
        "description": "webapp.crud.get_ingredient_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_ingredient_recipe",
        "documentation": {}
    },
    {
        "label": "get_ingredient_recipe",
        "importPath": "webapp.crud.get_ingredient_recipe",
        "description": "webapp.crud.get_ingredient_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_ingredient_recipe",
        "documentation": {}
    },
    {
        "label": "get_ingredient_recipe",
        "importPath": "webapp.crud.get_ingredient_recipe",
        "description": "webapp.crud.get_ingredient_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_ingredient_recipe",
        "documentation": {}
    },
    {
        "label": "get_ingredient",
        "importPath": "webapp.crud.get_ingredient",
        "description": "webapp.crud.get_ingredient",
        "isExtraImport": true,
        "detail": "webapp.crud.get_ingredient",
        "documentation": {}
    },
    {
        "label": "get_ingredient",
        "importPath": "webapp.crud.get_ingredient",
        "description": "webapp.crud.get_ingredient",
        "isExtraImport": true,
        "detail": "webapp.crud.get_ingredient",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "AssociationData",
        "importPath": "webapp.schema.ingredient_to_recipe",
        "description": "webapp.schema.ingredient_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeUser",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeData",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeTitle",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeData",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipesResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipesResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeTitle",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipesResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipesResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeField",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeData",
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "UserToRecipe",
        "importPath": "webapp.models.sirius.user_to_recipe",
        "description": "webapp.models.sirius.user_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user_to_recipe",
        "documentation": {}
    },
    {
        "label": "UserToRecipe",
        "importPath": "webapp.models.sirius.user_to_recipe",
        "description": "webapp.models.sirius.user_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.models.sirius.user_to_recipe",
        "documentation": {}
    },
    {
        "label": "AssociationData",
        "importPath": "webapp.schema.user_to_recipe",
        "description": "webapp.schema.user_to_recipe",
        "isExtraImport": true,
        "detail": "webapp.schema.user_to_recipe",
        "documentation": {}
    },
    {
        "label": "add_ingredient",
        "importPath": "webapp.api.recipe.add_ingredient",
        "description": "webapp.api.recipe.add_ingredient",
        "isExtraImport": true,
        "detail": "webapp.api.recipe.add_ingredient",
        "documentation": {}
    },
    {
        "label": "read_ingredient",
        "importPath": "webapp.api.ingredient.read",
        "description": "webapp.api.ingredient.read",
        "isExtraImport": true,
        "detail": "webapp.api.ingredient.read",
        "documentation": {}
    },
    {
        "label": "get_recipe",
        "importPath": "webapp.crud.get_recipe",
        "description": "webapp.crud.get_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_recipe",
        "documentation": {}
    },
    {
        "label": "get_sorted_recipes",
        "importPath": "webapp.crud.get_recipe",
        "description": "webapp.crud.get_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_recipe",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "isExtraImport": true,
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "get_user_recipe",
        "importPath": "webapp.crud.get_user_recipe",
        "description": "webapp.crud.get_user_recipe",
        "isExtraImport": true,
        "detail": "webapp.crud.get_user_recipe",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserTokenResponse",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "isExtraImport": true,
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "redis_get",
        "importPath": "webapp.cache.redis",
        "description": "webapp.cache.redis",
        "isExtraImport": true,
        "detail": "webapp.cache.redis",
        "documentation": {}
    },
    {
        "label": "redis_set",
        "importPath": "webapp.cache.redis",
        "description": "webapp.cache.redis",
        "isExtraImport": true,
        "detail": "webapp.cache.redis",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "isExtraImport": true,
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "orjson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "orjson",
        "description": "orjson",
        "detail": "orjson",
        "documentation": {}
    },
    {
        "label": "get_cache_name",
        "importPath": "webapp.cache.key_builder",
        "description": "webapp.cache.key_builder",
        "isExtraImport": true,
        "detail": "webapp.cache.key_builder",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEPS_LATENCY",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "MetricsMiddleware",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "metrics",
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "isExtraImport": true,
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DeclarativeMeta",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "AIOKafkaProducer",
        "importPath": "aiokafka.producer",
        "description": "aiokafka.producer",
        "isExtraImport": true,
        "detail": "aiokafka.producer",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "ConnectionPool",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "Redis",
        "importPath": "redis.asyncio",
        "description": "redis.asyncio",
        "isExtraImport": true,
        "detail": "redis.asyncio",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "redis",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "kafka",
        "importPath": "webapp.db",
        "description": "webapp.db",
        "isExtraImport": true,
        "detail": "webapp.db",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "monotonic",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE_LATEST",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "REGISTRY",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "CollectorRegistry",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "Histogram",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "generate_latest",
        "importPath": "prometheus_client",
        "description": "prometheus_client",
        "isExtraImport": true,
        "detail": "prometheus_client",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "BaseHTTPMiddleware",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "RequestResponseEndpoint",
        "importPath": "starlette.middleware.base",
        "description": "starlette.middleware.base",
        "isExtraImport": true,
        "detail": "starlette.middleware.base",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "starlette.requests",
        "description": "starlette.requests",
        "isExtraImport": true,
        "detail": "starlette.requests",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "stop_producer",
        "importPath": "webapp.on_shutdown",
        "description": "webapp.on_shutdown",
        "isExtraImport": true,
        "detail": "webapp.on_shutdown",
        "documentation": {}
    },
    {
        "label": "create_producer",
        "importPath": "webapp.on_startup.kafka",
        "description": "webapp.on_startup.kafka",
        "isExtraImport": true,
        "detail": "webapp.on_startup.kafka",
        "documentation": {}
    },
    {
        "label": "MultiProcessCollector",
        "importPath": "prometheus_client.multiprocess",
        "description": "prometheus_client.multiprocess",
        "isExtraImport": true,
        "detail": "prometheus_client.multiprocess",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "starlette.responses",
        "description": "starlette.responses",
        "isExtraImport": true,
        "detail": "starlette.responses",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "conf.config",
        "description": "conf.config",
        "peekOfCode": "class Settings(BaseSettings):\n    BIND_IP: str\n    BIND_PORT: int\n    DB_URL: str\n    JWT_SECRET_SALT: str\n    KAFKA_BOOTSTRAP_SERVERS: List[str]\n    KAFKA_TOPIC: str\n    REDIS_HOST: str\n    REDIS_PORT: int\n    REDIS_PASSWORD: str",
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "conf.config",
        "description": "conf.config",
        "peekOfCode": "settings = Settings()",
        "detail": "conf.config",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "scripts.load_data",
        "description": "scripts.load_data",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('fixtures', nargs='+', help='<Required> Set flag')\nargs = parser.parse_args()\nasync def main(fixtures: List[str]) -> None:\n    for fixture in fixtures:\n        fixture_path = Path(fixture)\n        model = metadata.tables[fixture_path.stem]\n        with open(fixture_path, 'r') as file:\n            values = json.load(file)\n        async with async_session() as session:",
        "detail": "scripts.load_data",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "scripts.load_data",
        "description": "scripts.load_data",
        "peekOfCode": "args = parser.parse_args()\nasync def main(fixtures: List[str]) -> None:\n    for fixture in fixtures:\n        fixture_path = Path(fixture)\n        model = metadata.tables[fixture_path.stem]\n        with open(fixture_path, 'r') as file:\n            values = json.load(file)\n        async with async_session() as session:\n            await session.execute(insert(model).values(values))\n            await session.commit()",
        "detail": "scripts.load_data",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.ingredient.test_ingredient",
        "description": "tests.api.ingredient.test_ingredient",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.ingredient.json\",",
        "detail": "tests.api.ingredient.test_ingredient",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.ingredient.test_ingredient",
        "description": "tests.api.ingredient.test_ingredient",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.ingredient.json\",\n                FIXTURES_PATH / \"sirius.user.json\",",
        "detail": "tests.api.ingredient.test_ingredient",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "description": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.ingredient.json\",",
        "detail": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "description": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.ingredient.json\",\n                FIXTURES_PATH / \"sirius.recipe.json\",",
        "detail": "tests.api.ingredient_to_recipe.test_ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.recipe.test_recipe",
        "description": "tests.api.recipe.test_recipe",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.recipe.json\",",
        "detail": "tests.api.recipe.test_recipe",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.recipe.test_recipe",
        "description": "tests.api.recipe.test_recipe",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.recipe.json\",\n                FIXTURES_PATH / \"sirius.user.json\",",
        "detail": "tests.api.recipe.test_recipe",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "tests.api.user.test_user",
        "description": "tests.api.user.test_user",
        "peekOfCode": "BASE_DIR = Path(__file__).parent\nFIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.user.json\",",
        "detail": "tests.api.user.test_user",
        "documentation": {}
    },
    {
        "label": "FIXTURES_PATH",
        "kind": 5,
        "importPath": "tests.api.user.test_user",
        "description": "tests.api.user.test_user",
        "peekOfCode": "FIXTURES_PATH = BASE_DIR / \"fixtures\"\n@pytest.mark.parametrize(\n    (\"username\", \"password\", \"fixtures\", \"expected_status\"),\n    [\n        (\n            \"test_client\",\n            \"secret\",\n            [\n                FIXTURES_PATH / \"sirius.user.json\",\n            ],",
        "detail": "tests.api.user.test_user",
        "documentation": {}
    },
    {
        "label": "event_loop",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def event_loop():\n    return asyncio.get_event_loop()\n@pytest.fixture(scope=\"session\")\nasync def _migrate_db() -> FixtureFunctionT:\n    async with engine.begin() as conn:\n        await conn.run_sync(meta.metadata.create_all)\n    yield\n    return",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "API_PREFIX",
        "kind": 5,
        "importPath": "tests.const",
        "description": "tests.const",
        "peekOfCode": "API_PREFIX = settings.API_PREFIX\nURLS = {\n    \"api\": {\n        \"user\": {\n            \"register\": API_PREFIX + \"/user/register\",\n            \"login\": API_PREFIX + \"/user/login\",\n        },\n        \"user\": {\"user\": API_PREFIX + \"/user\"},\n        \"ingredient\": {\"ingredient\": API_PREFIX + \"/ingredient\"},\n        \"recipe\": {\"recipe\": API_PREFIX + \"/recipe\"},",
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "URLS",
        "kind": 5,
        "importPath": "tests.const",
        "description": "tests.const",
        "peekOfCode": "URLS = {\n    \"api\": {\n        \"user\": {\n            \"register\": API_PREFIX + \"/user/register\",\n            \"login\": API_PREFIX + \"/user/login\",\n        },\n        \"user\": {\"user\": API_PREFIX + \"/user\"},\n        \"ingredient\": {\"ingredient\": API_PREFIX + \"/ingredient\"},\n        \"recipe\": {\"recipe\": API_PREFIX + \"/recipe\"},\n    }",
        "detail": "tests.const",
        "documentation": {}
    },
    {
        "label": "FixtureFunctionT",
        "kind": 5,
        "importPath": "tests.my_types",
        "description": "tests.my_types",
        "peekOfCode": "FixtureFunctionT = None",
        "detail": "tests.my_types",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.10/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "ingredient_router",
        "kind": 5,
        "importPath": "webapp.api.ingredient.router",
        "description": "webapp.api.ingredient.router",
        "peekOfCode": "ingredient_router = APIRouter(prefix='/ingredient')",
        "detail": "webapp.api.ingredient.router",
        "documentation": {}
    },
    {
        "label": "recipe_router",
        "kind": 5,
        "importPath": "webapp.api.recipe.router",
        "description": "webapp.api.recipe.router",
        "peekOfCode": "recipe_router = APIRouter(prefix='/recipe')",
        "detail": "webapp.api.recipe.router",
        "documentation": {}
    },
    {
        "label": "auth_router",
        "kind": 5,
        "importPath": "webapp.api.user.router",
        "description": "webapp.api.user.router",
        "peekOfCode": "auth_router = APIRouter(prefix='/user')",
        "detail": "webapp.api.user.router",
        "documentation": {}
    },
    {
        "label": "get_cache_name",
        "kind": 2,
        "importPath": "webapp.cache.key_builder",
        "description": "webapp.cache.key_builder",
        "peekOfCode": "def get_cache_name(task_id: str) -> str:\n    return f'{settings.REDIS_SIRIUS_CACHE_PREFIX}:info:{task_id}'",
        "detail": "webapp.cache.key_builder",
        "documentation": {}
    },
    {
        "label": "ModelT",
        "kind": 5,
        "importPath": "webapp.crud.crud",
        "description": "webapp.crud.crud",
        "peekOfCode": "ModelT = TypeVar('ModelT', bound=DeclarativeMeta)\n@async_integrations_timer\nasync def get(session: AsyncSession, model_id: Any, model: Type[ModelT]) -> List[ModelT] | None:\n    return (await session.scalars(sqlalchemy.select(model).where(model.id == model_id))).one_or_none()\n@async_integrations_timer\nasync def get_all(session: AsyncSession, model: Type[ModelT]) -> Row | RowMapping | Any | None:\n    return (await session.scalars(sqlalchemy.select(model))).all()  # сделать пагинацию\n    # return await paginate(session, select(model))   # TODO может быть ошибка\n@async_integrations_timer\nasync def create(session: AsyncSession, data: Any, model: ModelT) -> ModelT:",
        "detail": "webapp.crud.crud",
        "documentation": {}
    },
    {
        "label": "get_producer",
        "kind": 2,
        "importPath": "webapp.db.kafka",
        "description": "webapp.db.kafka",
        "peekOfCode": "def get_producer() -> AIOKafkaProducer:\n    global producer\n    return producer\ndef get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "get_partition",
        "kind": 2,
        "importPath": "webapp.db.kafka",
        "description": "webapp.db.kafka",
        "peekOfCode": "def get_partition() -> int:\n    global partitions\n    return random.choice(partitions)",
        "detail": "webapp.db.kafka",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "kind": 2,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "def create_engine() -> AsyncEngine:\n    return create_async_engine(\n        settings.DB_URL,\n        poolclass=QueuePool,\n        connect_args={\n            'statement_cache_size': 0,\n        },\n    )\ndef create_session(engine: AsyncEngine | None = None) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "create_session",
        "kind": 2,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "def create_session(engine: AsyncEngine | None = None) -> async_sessionmaker[AsyncSession]:\n    return async_sessionmaker(\n        bind=engine or create_engine(),\n        class_=AsyncSession,\n        autoflush=False,\n        expire_on_commit=False,\n    )\nengine = create_engine()\nasync_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "engine = create_engine()\nasync_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "webapp.db.postgres",
        "description": "webapp.db.postgres",
        "peekOfCode": "async_session = create_session(engine)\nasync def get_session() -> AsyncGenerator[AsyncSession, None]:\n    async with async_session() as session:\n        yield session",
        "detail": "webapp.db.postgres",
        "documentation": {}
    },
    {
        "label": "get_redis",
        "kind": 2,
        "importPath": "webapp.db.redis",
        "description": "webapp.db.redis",
        "peekOfCode": "def get_redis() -> Redis:\n    global redis\n    return redis",
        "detail": "webapp.db.redis",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "kind": 6,
        "importPath": "webapp.models.sirius.ingredient",
        "description": "webapp.models.sirius.ingredient",
        "peekOfCode": "class Ingredient(Base):\n    __tablename__ = 'ingredient'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    title: Mapped[str] = mapped_column(String, unique=True)",
        "detail": "webapp.models.sirius.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientToRecipe",
        "kind": 6,
        "importPath": "webapp.models.sirius.ingredient_to_recipe",
        "description": "webapp.models.sirius.ingredient_to_recipe",
        "peekOfCode": "class IngredientToRecipe(Base):\n    __tablename__ = 'ingredient_to_recipe'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    ingredient_id: Mapped[int] = mapped_column(Integer, ForeignKey(f\"{DEFAULT_SCHEMA}.ingredient.id\"))\n    recipe_id: Mapped[int] = mapped_column(Integer, ForeignKey(f\"{DEFAULT_SCHEMA}.recipe.id\"))",
        "detail": "webapp.models.sirius.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "webapp.models.sirius.recipe",
        "description": "webapp.models.sirius.recipe",
        "peekOfCode": "class Recipe(Base):\n    __tablename__ = 'recipe'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    title: Mapped[str] = mapped_column(String, unique=True)\n    likes: Mapped[int] = mapped_column(Integer, default=0)",
        "detail": "webapp.models.sirius.recipe",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "webapp.models.sirius.user",
        "description": "webapp.models.sirius.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'user'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    username: Mapped[int] = mapped_column(String, unique=True)\n    code: Mapped[int] = mapped_column(Integer, unique=True)",
        "detail": "webapp.models.sirius.user",
        "documentation": {}
    },
    {
        "label": "UserToRecipe",
        "kind": 6,
        "importPath": "webapp.models.sirius.user_to_recipe",
        "description": "webapp.models.sirius.user_to_recipe",
        "peekOfCode": "class UserToRecipe(Base):\n    __tablename__ = 'user_to_recipe'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey(f\"{DEFAULT_SCHEMA}.user.id\"))\n    recipe_id: Mapped[int] = mapped_column(Integer, ForeignKey(f\"{DEFAULT_SCHEMA}.recipe.id\"))",
        "detail": "webapp.models.sirius.user_to_recipe",
        "documentation": {}
    },
    {
        "label": "NAMING_CONVENTION",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "NAMING_CONVENTION = {\n    'ix': 'ix_%(column_0_label)s',\n    'uq': 'uq_%(table_name)s_%(column_0_name)s',\n    'ck': 'ck_%(table_name)s_%(constraint_name)s',\n    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',\n    'pk': 'pk_%(table_name)s',\n}\nDEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION, schema=DEFAULT_SCHEMA)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "DEFAULT_SCHEMA = 'sirius'\nmetadata = MetaData(naming_convention=NAMING_CONVENTION, schema=DEFAULT_SCHEMA)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "metadata = MetaData(naming_convention=NAMING_CONVENTION, schema=DEFAULT_SCHEMA)\nBase = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "webapp.models.meta",
        "description": "webapp.models.meta",
        "peekOfCode": "Base = declarative_base(metadata=metadata)",
        "detail": "webapp.models.meta",
        "documentation": {}
    },
    {
        "label": "FeedbackData",
        "kind": 6,
        "importPath": "webapp.schema.feedback",
        "description": "webapp.schema.feedback",
        "peekOfCode": "class FeedbackData(BaseModel):\n    user_id: int\n    recipe_id: int\n    status: str",
        "detail": "webapp.schema.feedback",
        "documentation": {}
    },
    {
        "label": "IngredientData",
        "kind": 6,
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "peekOfCode": "class IngredientData(BaseModel):\n    title: str\nclass IngredientResponse(BaseModel):\n    id: int\n    title: str\nclass IngredientsResponse(BaseModel):\n    ingredients: List[IngredientResponse]",
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientResponse",
        "kind": 6,
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "peekOfCode": "class IngredientResponse(BaseModel):\n    id: int\n    title: str\nclass IngredientsResponse(BaseModel):\n    ingredients: List[IngredientResponse]",
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "IngredientsResponse",
        "kind": 6,
        "importPath": "webapp.schema.ingredient",
        "description": "webapp.schema.ingredient",
        "peekOfCode": "class IngredientsResponse(BaseModel):\n    ingredients: List[IngredientResponse]",
        "detail": "webapp.schema.ingredient",
        "documentation": {}
    },
    {
        "label": "AssociationData",
        "kind": 6,
        "importPath": "webapp.schema.ingredient_to_recipe",
        "description": "webapp.schema.ingredient_to_recipe",
        "peekOfCode": "class AssociationData(BaseModel):\n    ingredient_id: int\n    recipe_id: int",
        "detail": "webapp.schema.ingredient_to_recipe",
        "documentation": {}
    },
    {
        "label": "RecipeData",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeData(BaseModel):\n    title: str\n    likes: Optional[int] = None\n    ingredients: List[str]\n    user: Optional[int] = None\nclass RecipeField(BaseModel):\n    title: Optional[str] = None\n    likes: Optional[int] = None\nclass RecipeTitle(BaseModel):\n    title: str",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeField",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeField(BaseModel):\n    title: Optional[str] = None\n    likes: Optional[int] = None\nclass RecipeTitle(BaseModel):\n    title: str\nclass RecipeIngredients(BaseModel):\n    ingredients: List[str]\nclass RecipeIngredient(BaseModel):\n    ingredient: str\nclass RecipeUser(BaseModel):",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeTitle",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeTitle(BaseModel):\n    title: str\nclass RecipeIngredients(BaseModel):\n    ingredients: List[str]\nclass RecipeIngredient(BaseModel):\n    ingredient: str\nclass RecipeUser(BaseModel):\n    username: str\nclass RecipeId(BaseModel):\n    id: int",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeIngredients",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeIngredients(BaseModel):\n    ingredients: List[str]\nclass RecipeIngredient(BaseModel):\n    ingredient: str\nclass RecipeUser(BaseModel):\n    username: str\nclass RecipeId(BaseModel):\n    id: int\nclass RecipeResponse(BaseModel):\n    id: int",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeIngredient",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeIngredient(BaseModel):\n    ingredient: str\nclass RecipeUser(BaseModel):\n    username: str\nclass RecipeId(BaseModel):\n    id: int\nclass RecipeResponse(BaseModel):\n    id: int\n    title: str\n    likes: int",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeUser",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeUser(BaseModel):\n    username: str\nclass RecipeId(BaseModel):\n    id: int\nclass RecipeResponse(BaseModel):\n    id: int\n    title: str\n    likes: int\nclass RecipesResponse(BaseModel):\n    recipes: List[RecipeResponse]",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeId",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeId(BaseModel):\n    id: int\nclass RecipeResponse(BaseModel):\n    id: int\n    title: str\n    likes: int\nclass RecipesResponse(BaseModel):\n    recipes: List[RecipeResponse]",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipeResponse",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipeResponse(BaseModel):\n    id: int\n    title: str\n    likes: int\nclass RecipesResponse(BaseModel):\n    recipes: List[RecipeResponse]",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "RecipesResponse",
        "kind": 6,
        "importPath": "webapp.schema.recipe",
        "description": "webapp.schema.recipe",
        "peekOfCode": "class RecipesResponse(BaseModel):\n    recipes: List[RecipeResponse]",
        "detail": "webapp.schema.recipe",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "peekOfCode": "class UserLogin(BaseModel):\n    username: str\n    code: int\nclass UserLoginResponse(BaseModel):\n    id: int\n    username: str\nclass UserTokenResponse(BaseModel):\n    access_token: str",
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserLoginResponse",
        "kind": 6,
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "peekOfCode": "class UserLoginResponse(BaseModel):\n    id: int\n    username: str\nclass UserTokenResponse(BaseModel):\n    access_token: str",
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "UserTokenResponse",
        "kind": 6,
        "importPath": "webapp.schema.user",
        "description": "webapp.schema.user",
        "peekOfCode": "class UserTokenResponse(BaseModel):\n    access_token: str",
        "detail": "webapp.schema.user",
        "documentation": {}
    },
    {
        "label": "AssociationData",
        "kind": 6,
        "importPath": "webapp.schema.user_to_recipe",
        "description": "webapp.schema.user_to_recipe",
        "peekOfCode": "class AssociationData(BaseModel):\n    user_id: int\n    recipe_id: int",
        "detail": "webapp.schema.user_to_recipe",
        "documentation": {}
    },
    {
        "label": "JwtTokenT",
        "kind": 6,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "class JwtTokenT(TypedDict):\n    uid: str\n    exp: datetime\n    user_id: int\n@dataclass\nclass JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        token = {\n            'uid': uuid.uuid4().hex,",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "JwtAuth",
        "kind": 6,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "class JwtAuth:\n    secret: str\n    def create_token(self, user_id: int) -> str:\n        token = {\n            'uid': uuid.uuid4().hex,\n            'exp': datetime.utcnow() + timedelta(days=6),\n            'user_id': user_id,\n        }\n        return jwt.encode(token, self.secret)\n    def validate_token(self, access_token: str) -> JwtTokenT:",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "jwt_auth",
        "kind": 5,
        "importPath": "webapp.utils.auth.jwt",
        "description": "webapp.utils.auth.jwt",
        "peekOfCode": "jwt_auth = JwtAuth(settings.JWT_SECRET_SALT)",
        "detail": "webapp.utils.auth.jwt",
        "documentation": {}
    },
    {
        "label": "kafka_producer_decorator",
        "kind": 2,
        "importPath": "webapp.utils.decorator",
        "description": "webapp.utils.decorator",
        "peekOfCode": "def kafka_producer_decorator(topic):\n    def decorator(func):\n        @wraps(func)\n        async def wrapper(*args, **kwargs):\n            start = time.time()\n            result = await func(*args, **kwargs)\n            if hasattr(result, 'dict'):\n                result_data = result.dict()\n            elif isinstance(result, dict):\n                result_data = result",
        "detail": "webapp.utils.decorator",
        "documentation": {}
    },
    {
        "label": "MeasureLatencyMiddleware",
        "kind": 6,
        "importPath": "webapp.utils.middleware",
        "description": "webapp.utils.middleware",
        "peekOfCode": "class MeasureLatencyMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        endpoint = request.url.path\n        start_time = time.time()\n        response = await call_next(request)\n        process_time = time.time() - start_time\n        DEPS_LATENCY.labels(endpoint=endpoint).observe(process_time)\n        # Увеличиваем счетчик запросов\n        REQUESTS_COUNTER.labels(\n            method=request.method,",
        "detail": "webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "webapp.utils.middleware",
        "description": "webapp.utils.middleware",
        "peekOfCode": "REQUESTS_COUNTER = Counter(\n    'sirius_api_requests_total',\n    'Total number of requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\n# Счетчики для успешных и неуспешных запросов\nSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_successful_requests_total',\n    'Total number of successful requests to the API',\n    ['method', 'endpoint', 'http_status'],",
        "detail": "webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "SUCCESSFUL_REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "webapp.utils.middleware",
        "description": "webapp.utils.middleware",
        "peekOfCode": "SUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_successful_requests_total',\n    'Total number of successful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\nUNSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_unsuccessful_requests_total',\n    'Total number of unsuccessful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)",
        "detail": "webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "UNSUCCESSFUL_REQUESTS_COUNTER",
        "kind": 5,
        "importPath": "webapp.utils.middleware",
        "description": "webapp.utils.middleware",
        "peekOfCode": "UNSUCCESSFUL_REQUESTS_COUNTER = Counter(\n    'sirius_api_unsuccessful_requests_total',\n    'Total number of unsuccessful requests to the API',\n    ['method', 'endpoint', 'http_status'],\n)\nclass MeasureLatencyMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        endpoint = request.url.path\n        start_time = time.time()\n        response = await call_next(request)",
        "detail": "webapp.utils.middleware",
        "documentation": {}
    },
    {
        "label": "setup_middleware",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def setup_middleware(app: FastAPI) -> None:\n    # CORS Middleware should be the last.\n    # See https://github.com/tiangolo/fastapi/issues/1663 .\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=['*'],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "setup_routers",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def setup_routers(app: FastAPI) -> None:\n    app.add_route('/metrics', metrics)\n    app.include_router(auth_router)\n    app.include_router(ingredient_router)\n    app.include_router(recipe_router)\n@asynccontextmanager\nasync def lifespan(app: FastAPI) -> AsyncIterator[None]:\n    await start_redis()\n    await create_producer()\n    print('START APP')",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "webapp.main",
        "description": "webapp.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    app = FastAPI(docs_url='/swagger', lifespan=lifespan)\n    setup_middleware(app)\n    setup_routers(app)\n    # add_pagination(app)\n    return app",
        "detail": "webapp.main",
        "documentation": {}
    },
    {
        "label": "MetricsMiddleware",
        "kind": 6,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "class MetricsMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:\n        start_time = monotonic()\n        response = await call_next(request)\n        process_time = monotonic() - start_time\n        REQUESTS_COUNT.labels(method=request.method, endpoint=request.url.path).inc()\n        REQUESTS_LATENCY.labels(method=request.method, endpoint=request.url.path).observe(process_time)\n        if 400 <= response.status_code < 600:\n            ERRORS_COUNT.labels(method=request.method, endpoint=request.url.path).inc()\n        return response",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "async_integrations_timer",
        "kind": 2,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "def async_integrations_timer(\n    func: Callable[..., Awaitable[Any]],\n) -> Callable[..., Awaitable[Any]]:\n    async def wrapper(*args: List[Any], **kwargs: Dict[Any, Any]) -> Awaitable[Any]:\n        start_time: float = monotonic()\n        result = await func(*args, **kwargs)\n        INTEGRATIONS_LATENCY.labels(integration=func.__name__).observe(monotonic() - start_time)\n        return result\n    return wrapper\ndef metrics(request: Request) -> Response:",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "metrics",
        "kind": 2,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "def metrics(request: Request) -> Response:\n    if 'prometheus_multiproc_dir' in os.environ:\n        registry = CollectorRegistry()\n        MultiProcessCollector(registry)\n    else:\n        registry = REGISTRY\n    return Response(generate_latest(registry), headers={'Content-Type': CONTENT_TYPE_LATEST})",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BUCKETS",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "DEFAULT_BUCKETS = (\n    0.005,\n    0.01,\n    0.025,\n    0.05,\n    0.075,\n    0.1,\n    0.125,\n    0.15,\n    0.175,",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "REQUESTS_COUNT",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "REQUESTS_COUNT = Counter(\n    \"http_requests_total\",\n    \"Total number of HTTP requests\",\n    [\"method\", \"endpoint\"],\n)\nERRORS_COUNT = Counter(\n    \"http_errors_total\",\n    \"Total number of HTTP response errors\",\n    [\"method\", \"endpoint\"],\n)",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "ERRORS_COUNT",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "ERRORS_COUNT = Counter(\n    \"http_errors_total\",\n    \"Total number of HTTP response errors\",\n    [\"method\", \"endpoint\"],\n)\nREQUESTS_LATENCY = Histogram(\n    \"http_request_latency_seconds\",\n    \"HTTP request latency\",\n    [\"method\", \"endpoint\"],\n    buckets=DEFAULT_BUCKETS,",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "REQUESTS_LATENCY",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "REQUESTS_LATENCY = Histogram(\n    \"http_request_latency_seconds\",\n    \"HTTP request latency\",\n    [\"method\", \"endpoint\"],\n    buckets=DEFAULT_BUCKETS,\n)\nINTEGRATIONS_LATENCY = Histogram(\n    \"integrations_latency_seconds\",\n    \"Integration request latency\",\n    [\"integration\"],",
        "detail": "webapp.metrics",
        "documentation": {}
    },
    {
        "label": "INTEGRATIONS_LATENCY",
        "kind": 5,
        "importPath": "webapp.metrics",
        "description": "webapp.metrics",
        "peekOfCode": "INTEGRATIONS_LATENCY = Histogram(\n    \"integrations_latency_seconds\",\n    \"Integration request latency\",\n    [\"integration\"],\n    buckets=DEFAULT_BUCKETS,\n)\n# A middleware to count Prometheus metrics\nclass MetricsMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next: RequestResponseEndpoint) -> Response:\n        start_time = monotonic()",
        "detail": "webapp.metrics",
        "documentation": {}
    }
]